//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TorrentClient.TorrentService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TorrentService.MyTorrentServiceSoap")]
    public interface MyTorrentServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/checkUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int checkUser(string UserName, string Password, string reqType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/checkUser", ReplyAction="*")]
        System.Threading.Tasks.Task<int> checkUserAsync(string UserName, string Password, string reqType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/manageUserList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void manageUserList(string str1, string str2, int id, string reqType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/manageUserList", ReplyAction="*")]
        System.Threading.Tasks.Task manageUserListAsync(string str1, string str2, int id, string reqType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SignInDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SignInDetails(string userName, string password, string IP, int port, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SignInDetails", ReplyAction="*")]
        System.Threading.Tasks.Task SignInDetailsAsync(string userName, string password, string IP, int port, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertFilesRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void InsertFilesRecord(string fileName, int size, string IP, int port, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertFilesRecord", ReplyAction="*")]
        System.Threading.Tasks.Task InsertFilesRecordAsync(string fileName, int size, string IP, int port, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Connection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Connection(string userName, string password, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Connection", ReplyAction="*")]
        System.Threading.Tasks.Task ConnectionAsync(string userName, string password, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsUserAdmin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int IsUserAdmin(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsUserAdmin", ReplyAction="*")]
        System.Threading.Tasks.Task<int> IsUserAdminAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getFileList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getFileList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getFileList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getFileListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getSearchResult", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getSearchResult(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getSearchResult", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getSearchResultAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCountClients", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int getCountClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCountClients", ReplyAction="*")]
        System.Threading.Tasks.Task<int> getCountClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCountFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int getCountFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCountFiles", ReplyAction="*")]
        System.Threading.Tasks.Task<int> getCountFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getConnectedClients", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int getConnectedClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getConnectedClients", ReplyAction="*")]
        System.Threading.Tasks.Task<int> getConnectedClientsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MyTorrentServiceSoapChannel : TorrentClient.TorrentService.MyTorrentServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyTorrentServiceSoapClient : System.ServiceModel.ClientBase<TorrentClient.TorrentService.MyTorrentServiceSoap>, TorrentClient.TorrentService.MyTorrentServiceSoap {
        
        public MyTorrentServiceSoapClient() {
        }
        
        public MyTorrentServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyTorrentServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyTorrentServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyTorrentServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int checkUser(string UserName, string Password, string reqType) {
            return base.Channel.checkUser(UserName, Password, reqType);
        }
        
        public System.Threading.Tasks.Task<int> checkUserAsync(string UserName, string Password, string reqType) {
            return base.Channel.checkUserAsync(UserName, Password, reqType);
        }
        
        public void manageUserList(string str1, string str2, int id, string reqType) {
            base.Channel.manageUserList(str1, str2, id, reqType);
        }
        
        public System.Threading.Tasks.Task manageUserListAsync(string str1, string str2, int id, string reqType) {
            return base.Channel.manageUserListAsync(str1, str2, id, reqType);
        }
        
        public void SignInDetails(string userName, string password, string IP, int port, string path) {
            base.Channel.SignInDetails(userName, password, IP, port, path);
        }
        
        public System.Threading.Tasks.Task SignInDetailsAsync(string userName, string password, string IP, int port, string path) {
            return base.Channel.SignInDetailsAsync(userName, password, IP, port, path);
        }
        
        public void InsertFilesRecord(string fileName, int size, string IP, int port, string path) {
            base.Channel.InsertFilesRecord(fileName, size, IP, port, path);
        }
        
        public System.Threading.Tasks.Task InsertFilesRecordAsync(string fileName, int size, string IP, int port, string path) {
            return base.Channel.InsertFilesRecordAsync(fileName, size, IP, port, path);
        }
        
        public void Connection(string userName, string password, string status) {
            base.Channel.Connection(userName, password, status);
        }
        
        public System.Threading.Tasks.Task ConnectionAsync(string userName, string password, string status) {
            return base.Channel.ConnectionAsync(userName, password, status);
        }
        
        public int IsUserAdmin(string userName, string password) {
            return base.Channel.IsUserAdmin(userName, password);
        }
        
        public System.Threading.Tasks.Task<int> IsUserAdminAsync(string userName, string password) {
            return base.Channel.IsUserAdminAsync(userName, password);
        }
        
        public System.Data.DataSet getFileList() {
            return base.Channel.getFileList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getFileListAsync() {
            return base.Channel.getFileListAsync();
        }
        
        public System.Data.DataSet getSearchResult(string name) {
            return base.Channel.getSearchResult(name);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getSearchResultAsync(string name) {
            return base.Channel.getSearchResultAsync(name);
        }
        
        public int getCountClients() {
            return base.Channel.getCountClients();
        }
        
        public System.Threading.Tasks.Task<int> getCountClientsAsync() {
            return base.Channel.getCountClientsAsync();
        }
        
        public int getCountFiles() {
            return base.Channel.getCountFiles();
        }
        
        public System.Threading.Tasks.Task<int> getCountFilesAsync() {
            return base.Channel.getCountFilesAsync();
        }
        
        public int getConnectedClients() {
            return base.Channel.getConnectedClients();
        }
        
        public System.Threading.Tasks.Task<int> getConnectedClientsAsync() {
            return base.Channel.getConnectedClientsAsync();
        }
    }
}
